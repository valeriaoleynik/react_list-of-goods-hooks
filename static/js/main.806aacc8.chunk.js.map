{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","sortButtons","name","class","change","Name","Length","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","prepareGoods","sort","good1","good2","localeCompare","length","reverse","getPrepareGoods","className","map","button","type","cn","onClick","sortChange","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,eAAAA,E,YAAAA,E,iBAAAA,M,KAuCL,IAAME,EAAc,CAClB,CAAEC,KAAM,sBAAuBC,MAAO,UAAWC,OAAQL,EAAUM,MACnE,CAAEH,KAAM,iBAAkBC,MAAO,aAAcC,OAAQL,EAAUO,SAKtDC,EAAgB,WAC3B,MAAkCC,mBAAST,EAAUU,SAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAvCR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,WAETI,EAAY,YAAOD,GAqBvB,OAnBIL,IAAcX,EAAUU,SAC1BO,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKX,EAAUM,KACb,OAAOa,EAAME,cAAcD,GAE7B,KAAKpB,EAAUO,OACb,OAAOY,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,IACFI,EAAeA,EAAaM,WAGvBN,EAccO,CACnBvB,EACA,CAAEU,YAAWE,eAgBf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACGvB,EAAYwB,KAAI,SAAAC,GAAM,OACrB,wBAEEC,KAAK,SACLH,UAAWI,IAAG,SAAD,UAAcF,EAAOvB,OAAS,CAAE,WAAYO,IAAcgB,EAAOtB,SAC9EyB,SArBWC,EAqBUJ,EAAOtB,OArBS,WAC7CO,EAAamB,KAgBP,SAMGJ,EAAOxB,MALHwB,EAAOxB,MAlBF,IAAC4B,KA2Bf,wBACEH,KAAK,SACLH,UAAWI,IAAG,oBAAqB,CAAE,YAAahB,IAClDiB,QA1ByB,WAC/BhB,GAAeD,IAsBX,sBAQEF,IAAcX,EAAUU,SAAWG,IACnC,wBACEe,KAAK,SACLH,UAAU,4BACVK,QA/Bc,WACtBhB,GAAc,GACdF,EAAaZ,EAAUU,UA0BjB,sBAUJ,6BACGK,EAAaW,KAAI,SAAAM,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCtHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.806aacc8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Default = 'none',\n  Name = 'name',\n  Length = 'length',\n}\n\ninterface FilterParaments {\n  sortField: string;\n  isReversed: boolean;\n}\n\nfunction getPrepareGoods(\n  goods: string[],\n  { sortField, isReversed }: FilterParaments,\n): string[] {\n  let prepareGoods = [...goods];\n\n  if (sortField !== SortField.Default) {\n    prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Name:\n          return good1.localeCompare(good2);\n\n        case SortField.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nconst sortButtons = [\n  { name: 'Sort alphabetically', class: 'is-info', change: SortField.Name },\n  { name: 'Sort by length', class: 'is-success', change: SortField.Length },\n];\n\ntype Callback = () => void;\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPrepareGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  const onGoodClick = (sortChange: SortField) => () => {\n    setSortField(sortChange);\n  };\n\n  const onReverseClick: Callback = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset: Callback = () => {\n    setIsReversed(false);\n    setSortField(SortField.Default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        {sortButtons.map(button => (\n          <button\n            key={button.name}\n            type=\"button\"\n            className={cn('button', `${button.class}`, { 'is-light': sortField !== button.change })}\n            onClick={onGoodClick(button.change)}\n          >\n            {button.name}\n          </button>\n        ))}\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n          onClick={onReverseClick}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== SortField.Default || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(item => (\n          <li data-cy=\"Good\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}